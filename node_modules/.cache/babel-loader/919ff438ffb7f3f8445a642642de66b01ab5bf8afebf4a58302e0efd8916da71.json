{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst axios = require('axios');\nrequire('dotenv').config();\nconst app = express();\napp.use(bodyParser.json());\napp.use(cors());\nconst BTCPAY_SERVER_URL = process.env.BTCPAY_SERVER_URL;\nconst API_KEY = process.env.API_KEY;\nconst STORE_ID = process.env.STORE_ID;\napp.post('/api/createInvoice', async (req, res) => {\n  const {\n    price,\n    currency\n  } = req.body;\n  try {\n    const response = await axios.post(`${BTCPAY_SERVER_URL}/api/v1/stores/${STORE_ID}/invoices`, {\n      price,\n      currency\n    }, {\n      headers: {\n        Authorization: `token ${API_KEY}`\n      }\n    });\n    res.json({\n      url: response.data.checkoutLink\n    });\n  } catch (error) {\n    console.error('Error creating invoice:', error);\n    res.status(500).json({\n      error: 'Failed to create invoice'\n    });\n  }\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","bodyParser","cors","axios","config","app","use","json","BTCPAY_SERVER_URL","process","env","API_KEY","STORE_ID","post","req","res","price","currency","body","response","headers","Authorization","url","data","checkoutLink","error","console","status","PORT","listen","log"],"sources":["/Users/marwal/Desktop/Code/ChatGPT/e-commerce/src/components/Checkout.js"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst axios = require('axios');\nrequire('dotenv').config();\n\nconst app = express();\napp.use(bodyParser.json());\napp.use(cors());\n\nconst BTCPAY_SERVER_URL = process.env.BTCPAY_SERVER_URL;\nconst API_KEY = process.env.API_KEY;\nconst STORE_ID = process.env.STORE_ID;\n\napp.post('/api/createInvoice', async (req, res) => {\n  const { price, currency } = req.body;\n\n  try {\n    const response = await axios.post(\n      `${BTCPAY_SERVER_URL}/api/v1/stores/${STORE_ID}/invoices`,\n      { price, currency },\n      { headers: { Authorization: `token ${API_KEY}` } }\n    );\n    res.json({ url: response.data.checkoutLink });\n  } catch (error) {\n    console.error('Error creating invoice:', error);\n    res.status(500).json({ error: 'Failed to create invoice' });\n  }\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC;AAC9BA,OAAO,CAAC,QAAQ,CAAC,CAACI,MAAM,CAAC,CAAC;AAE1B,MAAMC,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrBM,GAAG,CAACC,GAAG,CAACL,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC;AAC1BF,GAAG,CAACC,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;AAEf,MAAMM,iBAAiB,GAAGC,OAAO,CAACC,GAAG,CAACF,iBAAiB;AACvD,MAAMG,OAAO,GAAGF,OAAO,CAACC,GAAG,CAACC,OAAO;AACnC,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACE,QAAQ;AAErCP,GAAG,CAACQ,IAAI,CAAC,oBAAoB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACjD,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEpC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACU,IAAI,CAC/B,GAAGL,iBAAiB,kBAAkBI,QAAQ,WAAW,EACzD;MAAEI,KAAK;MAAEC;IAAS,CAAC,EACnB;MAAEG,OAAO,EAAE;QAAEC,aAAa,EAAE,SAASV,OAAO;MAAG;IAAE,CACnD,CAAC;IACDI,GAAG,CAACR,IAAI,CAAC;MAAEe,GAAG,EAAEH,QAAQ,CAACI,IAAI,CAACC;IAAa,CAAC,CAAC;EAC/C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/CV,GAAG,CAACY,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;MAAEkB,KAAK,EAAE;IAA2B,CAAC,CAAC;EAC7D;AACF,CAAC,CAAC;AAEF,MAAMG,IAAI,GAAGnB,OAAO,CAACC,GAAG,CAACkB,IAAI,IAAI,IAAI;AACrCvB,GAAG,CAACwB,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBF,OAAO,CAACI,GAAG,CAAC,0BAA0BF,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}